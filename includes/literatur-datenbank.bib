
@article{chaniotis_is_2015,
	title = {Is {Node}.js a viable option for building modern web applications? {A} performance evaluation study},
	volume = {97},
	issn = {0010485X},
	url = {https://link.springer.com/article/10.1007/s00607-014-0394-9},
	doi = {10.1007/s00607-014-0394-9},
	abstract = {We examine the implications of end-to-end web application development, in the social web era. The paper describes a distributed architecture, suitable for modern web application development, as well as the interactivity components associated with it. Furthermore, we conducted a series of stress tests, on popular server side technologies. The PHP/Apache stack was found inefficient to address the increasing demand in network traffic. Nginx was found more than 2.5 times faster in input/output (I/O) operations than Apache, whereas Node.js outperformed both. Node.js, although excellent in I/O operations and resource utilization, was found lacking in serving static files using its built in HTTP server, while Nginx performed great at this task. So, in order to address efficiency, an Nginx server could be placed in-front and proxy static file requests, allowing the Node.js processes to only handle dynamic content. Such a configuration can offer a better infrastructure in terms of efficiency and scalability, replacing the aged PHP/Apache stack. Furthermore we have found that building cross platform applications based on web technologies, is both feasible and highly productive, especially when addressing stationary and mobile devices, as well as the fragmentation among them. Our study concludes that Node.js offers client-server development integration, aiding code reusability in web applications, and is the perfect tool for developing fast, scalable network applications.},
	number = {10},
	journal = {Computing},
	author = {Chaniotis, Ioannis K. and Kyriakou, Kyriakos Ioannis D. and Tselikas, Nikolaos D.},
	month = oct,
	year = {2015},
	note = {Publisher: Springer-Verlag Wien},
	keywords = {End-to-end JavaScript, Node.js, Real-time Web, Software performance evaluation, WebRTC, WebSockets},
	pages = {1023--1044},
}

@techreport{kern_tendenz_2015,
	title = {Tendenz zur {Empirie}? {Zur} neueren methodischen {Entwicklung} der {Wirtschaftsinformatik}},
	url = {www.wim.bwl.lmu.de},
	author = {Kern, Gestaltungsorientierter and Schreiner, Michel and Hess, Thomas and Benlian, Alexander},
	year = {2015},
}

@techreport{wilde_methodenspektrum_2006,
	title = {Methodenspektrum der {Wirtschaftsinformatik}: Überblick und {Portfoliobildung}},
	url = {http://www.wim.bwl.uni-muenchen.de},
	author = {Wilde, Thomas and Hess, Thomas},
	year = {2006},
}

@article{neumann_analysis_2018,
	title = {An {Analysis} of {Public} {REST} {Web} {Service} {APIs}},
	issn = {19391374},
	doi = {10.1109/TSC.2018.2847344},
	abstract = {Businesses are increasingly deploying their services on the web, in the form of web applications, SOAP services, message-based services, and, more recently, REST services. Although the movement towards REST is widely recognized, there is not much concrete information regarding the technical features being used in the field, such as typical data formats, how HTTP verbs are being used, or typical URI structure, just to name a few. In this paper, we go through the Alexa.com top 4000 most popular sites to identify precisely 500 websites claiming to provide a REST web service API. We analyze these 500 APIs for key technical features, degree of compliance with REST architectural principles (e.g., resource addressability), and for adherence to best practices (e.g., API versioning). We observed several trends (e.g., widespread JSON support, software-generated documentation), but, at the same time, high diversity in services, including differences in adherence to best practices, with only 0.8\% of services strictly complying with all REST principles. Our results can help practitioners evolve guidelines and standards for designing higher quality services and also understand deficiencies in currently deployed services. Researchers may also benefit from the identification of key research areas, contributing to the deployment of more reliable services.},
	journal = {IEEE Transactions on Services Computing},
	author = {Neumann, Andy and Laranjeiro, Nuno and Bernardino, Jorge},
	month = jun,
	year = {2018},
	note = {Publisher: Institute of Electrical and Electronics Engineers},
	keywords = {REST, API, HTTP, RESTful, Web, Web Services, Web Services Analysis},
	file = {Neumann et al. - 2018 - An Analysis of Public REST Web Service APIs.pdf:/Users/tmst/Zotero/storage/CTNGHPCQ/Neumann et al. - 2018 - An Analysis of Public REST Web Service APIs.pdf:application/pdf},
}

@inproceedings{rodriguez_rest_2016,
	title = {{REST} {APIs}: {A} large-scale analysis of compliance with principles and best practices},
	volume = {9671},
	isbn = {978-3-319-38790-1},
	url = {https://link.springer.com/chapter/10.1007/978-3-319-38791-8_2},
	doi = {10.1007/978-3-319-38791-8_2},
	abstract = {Quickly and dominantly, REST APIs have spread over the Web and percolated into modern software development practice, especially in the Mobile Internet where they conveniently enable offloading data and computations onto cloud services. We analyze more than 78GB of HTTP traffic collected by Italy’s biggest Mobile Internet provider over one full day and study how big the trend is in practice, how it changed the traffic that is generated by applications, and how REST APIs are implemented in practice. The analysis provides insight into the compliance of state-of-the-art APIs with theoretical Web engineering principles and guidelines, knowledge that affects how applications should be developed to be scalable and robust. The perspective is that of the Mobile Internet.},
	booktitle = {Lecture {Notes} in {Computer} {Science} (including subseries {Lecture} {Notes} in {Artificial} {Intelligence} and {Lecture} {Notes} in {Bioinformatics})},
	publisher = {Springer Verlag},
	author = {Rodríguez, Carlos and Baez, Marcos and Daniel, Florian and Casati, Fabio and Trabucco, Juan Carlos and Canali, Luigi and Percannella, Gianraffaele},
	year = {2016},
	note = {ISSN: 16113349},
	keywords = {REST, APIs, Mobile internet, REST principles},
	pages = {21--39},
	annote = {Telekom 78 GB Analyse},
	file = {Full Text:/Users/tmst/Zotero/storage/QM8ABRLW/Rodríguez et al. - 2016 - REST APIs A large-scale analysis of compliance wi.pdf:application/pdf},
}

@article{wilde_rest_2011,
	title = {{REST} : from research to practice},
	abstract = {Exploring ways of developing and implementing applications for REST, the Representational State Transfer system architecture conceived along with the World Wide Web, is gaining prominence as a research topic in academia and industry. Edited by two of the leading lights in REST research, this volume features edited and expanded papers from a key workshop at the 2010 World Wide Web conference, as well as further contributions by researchers on the cutting edge of REST development. The chapters aim to build understanding between those engaged in the abstractions of academic research on REST and the many originators and designers of processes claiming to be 'RESTful'. As well as covering the core principles of REST's architectural style, this significant contribution to the literature on Web development examines a number of REST applications that appear to display advantages over its competing 'WS' architecture. Contributors also assess the benefits REST brings to pervasive computing and cast an eye towards the future with a section on open research questions such as deciding on resource granularity, modeling metadata, and handling transactions. pt. 1. Foundations – pt. 2. Design – pt. 3. Development frameworks – pt. 4. Application case studies – pt. 5. REST and pervasive computing – pt. 6. REST research.},
	author = {Wilde, Erik and Pautasso, Cesare},
	year = {2011},
	note = {ISBN: 978-1441983022
Publisher: Springer},
	pages = {528},
}

@article{hewlett_packard_enterprise_development_lp_aruba_2021,
	title = {Aruba {Central} {User} {Guide}},
	author = {Hewlett Packard Enterprise Development LP},
	year = {2021},
}

@inproceedings{pautasso_restful_2008,
	title = {Restful web services vs. "big"' web services},
	isbn = {978-1-60558-085-2},
	doi = {10.1145/1367497.1367606},
	abstract = {pautasso2008.pdf},
	booktitle = {Proceeding of the 17th international conference on {World} {Wide} {Web} - {WWW} '08},
	publisher = {ACM Press},
	author = {Pautasso, Cesare and Zimmermann, Olaf and Leymann, Frank},
	year = {2008},
	annote = {Mehr vergleich von WS und REST},
	file = {Pautasso et al. - 2008 - Restful web services vs. big' web services.pdf:/Users/tmst/Zotero/storage/YQUIJTLI/Pautasso et al. - 2008 - Restful web services vs. big' web services.pdf:application/pdf},
}

@article{pautasso_rest_2009,
	title = {Some rest design patterns (and anti-patterns)},
	author = {Pautasso, C.},
	year = {2009},
	file = {Pautasso - 2009 - Some rest design patterns (and anti-patterns).pdf:/Users/tmst/Zotero/storage/CVHY5RM6/Pautasso - 2009 - Some rest design patterns (and anti-patterns).pdf:application/pdf},
}

@techreport{pautasso_restful_2014,
	title = {{RESTful} {Web} services: principles, patterns, emerging technologies},
	abstract = {RESTful Web services are software services which are published on the Web, taking full advantage and making correct use of the HTTP protocol. This chapter gives an introduction to the REST architectural style and how it can be used to design Web service APIs. We summarize the main design constraints of the REST architectural style and discuss how they impact the design of so-called RESTful Web service APIs. We give examples on how the Web can be seen as a novel kind of software connector, which enables the coordination of distributed, stateful and autonomous software services. We conclude the chapter with a critical overview of a set of emerging technologies which can be used to support the development and operation of RESTful Web services.},
	author = {Pautasso, Cesare},
	year = {2014},
	file = {restws2013.pdf:/Users/tmst/Zotero/storage/I62G9NB4/restws2013.pdf:application/pdf},
}

@book{erl_soa_2012,
	address = {Upper Saddle River, NJ},
	title = {{SOA} with {REST}: principles, patterns \& constraints for building enterprise solutions with {REST}},
	isbn = {978-0-13-701251-0},
	shorttitle = {{SOA} with {REST}},
	publisher = {Prentice Hall},
	editor = {Erl, Thomas},
	year = {2012},
	keywords = {Representational State Transfer (Software architecture), Service-oriented architecture (Computer science), references-todo},
	file = {Erl - 2012 - SOA with REST principles, patterns & constraints .pdf:/Users/tmst/Zotero/storage/RN8IPGY4/Erl - 2012 - SOA with REST principles, patterns & constraints .pdf:application/pdf},
}

@article{wilde_forschungsmethoden_2007,
	title = {Forschungsmethoden der {Wirtschaftsinformatik}: {Eine} empirische {Untersuchung}},
	volume = {49},
	issn = {0937-6429, 1861-8936},
	shorttitle = {Forschungsmethoden der {Wirtschaftsinformatik}},
	url = {http://link.springer.com/10.1007/s11576-007-0064-z},
	doi = {10.1007/s11576-007-0064-z},
	language = {de},
	number = {4},
	urldate = {2021-10-20},
	journal = {Wirtsch. Inform.},
	author = {Wilde, Thomas and Hess, Thomas},
	month = aug,
	year = {2007},
	pages = {280--287},
}

@incollection{sheng_are_2016,
	address = {Cham},
	title = {Are {REST} {APIs} for {Cloud} {Computing} {Well}-{Designed}? {An} {Exploratory} {Study}},
	volume = {9936},
	isbn = {978-3-319-46294-3 978-3-319-46295-0},
	shorttitle = {Are {REST} {APIs} for {Cloud} {Computing} {Well}-{Designed}?},
	url = {https://link.springer.com/10.1007/978-3-319-46295-0_10},
	language = {en},
	urldate = {2021-10-20},
	booktitle = {Service-{Oriented} {Computing}},
	publisher = {Springer International Publishing},
	author = {Petrillo, Fabio and Merle, Philippe and Moha, Naouel and Guéhéneuc, Yann-Gaël},
	editor = {Sheng, Quan Z. and Stroulia, Eleni and Tata, Samir and Bhiri, Sami},
	year = {2016},
	doi = {10.1007/978-3-319-46295-0_10},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {157--170},
	annote = {73 Regeln aus Literatur},
	annote = {Cloud computing is currently the most popular model to offer and access computational resources and services. Many cloud providers use the REST architectural style (Representational State Transfer) for offering such computational resources. However, these cloud providers face challenges when designing and exposing REST APIs that are easy to handle by end-users and/or developers. Yet, they benefit from best practices to help them design understandable and reusable REST APIs.
However, these best practices are scattered in the literature and they have not be studied systematically on real-world APIs. Consequently, we propose two contributions. In our first contribution, we survey the literature and compile a catalog of 73 best practices in the design of REST APIs making APIs more understandable and reusable. In our second contribution, we perform a study of three different and well-known REST APIs from three cloud providers to investigate how their APIs are offered and accessed. These cloud providers are Google Cloud Platform, OpenStack, and Open Cloud Computing Interface (OCCI). In particular, we evaluate the coverage of the features provided by the REST APIs of these cloud providers and their conformance with the best practices for REST APIs design.
Our results show that Google Cloud follows 66 \% (48/73), OpenStack follows 62 \% (45/73), and OCCI 1.2 follows 56 \% (41/73) of the best practices. Second, although these numbers are not necessarily high, partly because of the strict and precise specification of best practices, we showed that cloud APIs reach an acceptable level of maturity.},
	annote = {Dolar Approach sehr kompliziert},
	file = {Submitted Version:/Users/tmst/Zotero/storage/R9DK4J8S/Petrillo et al. - 2016 - Are REST APIs for Cloud Computing Well-Designed A.pdf:application/pdf},
}

@inproceedings{haupt_conversation_2015,
	address = {Montreal, QC, Canada},
	title = {A {Conversation} {Based} {Approach} for {Modeling} {REST} {APIs}},
	isbn = {978-1-4799-1922-2},
	url = {http://ieeexplore.ieee.org/document/7158518/},
	doi = {10.1109/WICSA.2015.20},
	urldate = {2021-10-20},
	booktitle = {2015 12th {Working} {IEEE}/{IFIP} {Conference} on {Software} {Architecture}},
	publisher = {IEEE},
	author = {Haupt, Florian and Leymann, Frank and Pautasso, Cesare},
	month = may,
	year = {2015},
	pages = {165--174},
	annote = {Charakterisierungsmodell für REST Interaktionenen},
	file = {Full Text:/Users/tmst/Zotero/storage/IQ5UIXSS/Haupt et al. - 2015 - A Conversation Based Approach for Modeling REST AP.pdf:application/pdf;WICSA.2015.20.pdf:/Users/tmst/Zotero/storage/YMJSXWPQ/WICSA.2015.20.pdf:application/pdf},
}

@techreport{kitchenham_guidelines_2007,
	title = {Guidelines for performing {Systematic} {Literature} {Reviews} in {Software} {Engineering}},
	url = {https://www.elsevier.com/__data/promis_misc/525444systematicreviewsguide.pdf},
	abstract = {The objective of this report is to propose comprehensive guidelines for systematic literature reviews appropriate for software engineering researchers, including PhD students. A systematic literature review is a means of evaluating and interpreting all available research relevant to a particular research question, topic area, or phenomenon of interest. Systematic reviews aim to present a fair evaluation of a research topic by using a trustworthy, rigorous, and auditable methodology. The guidelines presented in this report were derived from three existing guidelines used by medical researchers, two books produced by researchers with social science backgrounds and discussions with researchers from other disciplines who are involved in evidence-based practice. The guidelines have been adapted to reflect the specific problems of software engineering research. The guidelines cover three phases of a systematic literature review: planning the review, conducting the review and reporting the review. They provide a relatively high level description. They do not consider the impact of the research questions on the review procedures, nor do they specify in detail the mechanisms needed to perform meta-analysis.},
	language = {English},
	number = {EBSE 2007-001},
	institution = {Keele University},
	author = {Kitchenham, Barbara Ann and Charters, Stuart},
	month = jul,
	year = {2007},
	note = {Backup Publisher: Keele University and Durham University Joint Report},
	keywords = {engineering evidence evidence-based literature real review software systematic},
}

@article{brabra_semantic_2019,
	title = {On semantic detection of cloud {API} (anti)patterns},
	volume = {107},
	issn = {09505849},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S095058491830226X},
	doi = {10.1016/j.infsof.2018.10.012},
	language = {en},
	urldate = {2021-10-20},
	journal = {Information and Software Technology},
	author = {Brabra, Hayet and Mtibaa, Achraf and Petrillo, Fabio and Merle, Philippe and Sliman, Layth and Moha, Naouel and Gaaloul, Walid and Guéhéneuc, Yann-Gaël and Benatallah, Boualem and Gargouri, Faïez},
	month = mar,
	year = {2019},
	keywords = {references-todo},
	pages = {65--82},
	annote = {Viele Regeln und in SWRL sprache beschrieben, Qualität nicht so gut?},
	file = {Submitted Version:/Users/tmst/Zotero/storage/3SLKI6M5/Brabra et al. - 2019 - On semantic detection of cloud API (anti)patterns.pdf:application/pdf},
}

@incollection{barros_are_2015,
	address = {Berlin, Heidelberg},
	title = {Are {RESTful} {APIs} {Well}-{Designed}? {Detection} of their {Linguistic} ({Anti}){Patterns}},
	volume = {9435},
	isbn = {978-3-662-48615-3 978-3-662-48616-0},
	shorttitle = {Are {RESTful} {APIs} {Well}-{Designed}?},
	url = {http://link.springer.com/10.1007/978-3-662-48616-0_11},
	language = {en},
	urldate = {2021-10-20},
	booktitle = {Service-{Oriented} {Computing}},
	publisher = {Springer Berlin Heidelberg},
	author = {Palma, Francis and Gonzalez-Huerta, Javier and Moha, Naouel and Guéhéneuc, Yann-Gaël and Tremblay, Guy},
	editor = {Barros, Alistair and Grigori, Daniela and Narendra, Nanjangud C. and Dam, Hoa Khanh},
	year = {2015},
	doi = {10.1007/978-3-662-48616-0_11},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {171--187},
	file = {Palma et al. - 2015 - Are RESTful APIs well-designed detection of their.pdf:/Users/tmst/Zotero/storage/9DVGM5LP/Palma et al. - 2015 - Are RESTful APIs well-designed detection of their.pdf:application/pdf},
}

@incollection{franch_detection_2014,
	address = {Berlin, Heidelberg},
	title = {Detection of {REST} {Patterns} and {Antipatterns}: {A} {Heuristics}-{Based} {Approach}},
	volume = {8831},
	isbn = {978-3-662-45390-2 978-3-662-45391-9},
	shorttitle = {Detection of {REST} {Patterns} and {Antipatterns}},
	url = {http://link.springer.com/10.1007/978-3-662-45391-9_16},
	language = {en},
	urldate = {2021-10-20},
	booktitle = {Service-{Oriented} {Computing}},
	publisher = {Springer Berlin Heidelberg},
	author = {Palma, Francis and Dubois, Johann and Moha, Naouel and Guéhéneuc, Yann-Gaël},
	editor = {Franch, Xavier and Ghose, Aditya K. and Lewis, Grace A. and Bhiri, Sami},
	year = {2014},
	doi = {10.1007/978-3-662-45391-9_16},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {230--244},
	file = {Submitted Version:/Users/tmst/Zotero/storage/KGWALVGQ/Palma et al. - 2014 - Detection of REST Patterns and Antipatterns A Heu.pdf:application/pdf},
}

@incollection{barzen_which_2021,
	address = {Cham},
	title = {Which {RESTful} {API} {Design} {Rules} {Are} {Important} and {How} {Do} {They} {Improve} {Software} {Quality}? {A} {Delphi} {Study} with {Industry} {Experts}},
	volume = {1429},
	isbn = {978-3-030-87567-1 978-3-030-87568-8},
	shorttitle = {Which {RESTful} {API} {Design} {Rules} {Are} {Important} and {How} {Do} {They} {Improve} {Software} {Quality}?},
	url = {https://link.springer.com/10.1007/978-3-030-87568-8_10},
	language = {en},
	urldate = {2021-10-20},
	booktitle = {Service-{Oriented} {Computing}},
	publisher = {Springer International Publishing},
	author = {Kotstein, Sebastian and Bogner, Justus},
	editor = {Barzen, Johanna},
	year = {2021},
	doi = {10.1007/978-3-030-87568-8_10},
	note = {Series Title: Communications in Computer and Information Science},
	pages = {154--173},
	annote = {Todo in richardson einfädeln},
	annote = {Umfrage zu REST API Rating wie wichtig sind regeln according to experten},
	file = {Submitted Version:/Users/tmst/Zotero/storage/3AVG7WSN/Kotstein and Bogner - 2021 - Which RESTful API Design Rules Are Important and H.pdf:application/pdf},
}

@incollection{hutchison_todays_2012,
	address = {Berlin, Heidelberg},
	title = {Today’s {Top} “{RESTful}” {Services} and {Why} {They} {Are} {Not} {RESTful}},
	volume = {7651},
	isbn = {978-3-642-35062-7 978-3-642-35063-4},
	url = {http://link.springer.com/10.1007/978-3-642-35063-4_26},
	urldate = {2021-10-20},
	booktitle = {Web {Information} {Systems} {Engineering} - {WISE} 2012},
	publisher = {Springer Berlin Heidelberg},
	author = {Renzel, Dominik and Schlebusch, Patrick and Klamma, Ralf},
	editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Wang, X. Sean and Cruz, Isabel and Delis, Alex and Huang, Guangyan},
	year = {2012},
	doi = {10.1007/978-3-642-35063-4_26},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {354--367},
	annote = {Related Work gut
 
- Pautasso, C., Wilde, E.: Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design. In: Proceedings of the 18th international conference on WorldWide Web, WWW 2009, pp. 911–920. ACM, New York (2009)
- Zuzak, I., Schreier, S.: ArRESTed Development: Guidelines for Designing RESTFrameworks. IEEE Internet Computing 16(4), 26–35 (2012)
- Liskin, O., Singer, L., Schneider, K.: Welcome to the Real World - A Notation forModeling REST Services. IEEE Internet Computing 16(4), 36–44 (2012)
 
 },
	annote = {Results provide evidence that hardly any of the services claiming to be RESTful is truly RESTful,},
	annote = {Thus, although in theory the or- chestration of RESTful services should be rather seamless, reality shows that de- velopers have to follow different rules involving different representation schemes, etc.},
	annote = {Thus, we argue that increased efforts in formalization and documentation are required in particular.},
	file = {Renzel et al. - 2012 - Today’s Top “RESTful” Services and Why They Are No.pdf:/Users/tmst/Zotero/storage/GMFNHHMF/Renzel et al. - 2012 - Today’s Top “RESTful” Services and Why They Are No.pdf:application/pdf},
}

@book{wilde_rest_2011-1,
	address = {New York, NY},
	title = {{REST}: {From} {Research} to {Practice}},
	isbn = {978-1-4419-8302-2 978-1-4419-8303-9},
	shorttitle = {{REST}},
	url = {http://link.springer.com/10.1007/978-1-4419-8303-9},
	language = {en},
	urldate = {2021-10-20},
	publisher = {Springer New York},
	editor = {Wilde, Erik and Pautasso, Cesare},
	year = {2011},
	doi = {10.1007/978-1-4419-8303-9},
	file = {Wilde and Pautasso - 2011 - REST From Research to Practice.pdf:/Users/tmst/Zotero/storage/AHNRYGYG/Wilde and Pautasso - 2011 - REST From Research to Practice.pdf:application/pdf},
}

@inproceedings{maleshkova_investigating_2010,
	address = {Ayia Napa, Cyprus},
	title = {Investigating {Web} {APIs} on the {World} {Wide} {Web}},
	isbn = {978-1-4244-9397-5},
	url = {http://ieeexplore.ieee.org/document/5693251/},
	doi = {10.1109/ECOWS.2010.9},
	urldate = {2021-10-20},
	booktitle = {2010 {Eighth} {IEEE} {European} {Conference} on {Web} {Services}},
	publisher = {IEEE},
	author = {Maleshkova, Maria and Pedrinaci, Carlos and Domingue, John},
	month = dec,
	year = {2010},
	pages = {107--114},
	annote = {Web Entwicklung weitestgehend autonom},
	file = {Accepted Version:/Users/tmst/Zotero/storage/C73TBIMG/Maleshkova et al. - 2010 - Investigating Web APIs on the World Wide Web.pdf:application/pdf;ecows.2010.9.pdf:/Users/tmst/Zotero/storage/QIC92VS9/ecows.2010.9.pdf:application/pdf},
}

@article{fettke_referenzmodellierungsforschung_2004,
	title = {Referenzmodellierungsforschung},
	volume = {46},
	issn = {0937-6429, 1861-8936},
	url = {http://link.springer.com/10.1007/BF03250947},
	doi = {10.1007/BF03250947},
	language = {de},
	number = {5},
	urldate = {2021-10-21},
	journal = {Wirtschaftsinf},
	author = {Fettke, Peter and Loos, Peter},
	month = oct,
	year = {2004},
	pages = {331--340},
}

@inproceedings{petrillo_lexical_2018,
	address = {Cham},
	title = {A {Lexical} and {Semantical} {Analysis} on {REST} {Cloud} {Computing} {APIs}},
	isbn = {978-3-319-94959-8},
	doi = {10.1007/978-3-662-45391-9_16},
	abstract = {Cloud computing is a popular Internet-based computing paradigm that provides on-demand computational services and resources, generally offered by Cloud providers’ REpresentational State Transfer (REST) APIs. Developers use REST APIs by invoking these APIs by their names and, thus, the lexicons used in the APIs are important to ease the developers’ comprehension. In this paper, we study the lexicons and the linguistic (anti)patterns from 16 providers of REST Cloud Computing APIs. We observe that, although the 16 REST APIs describe the same domain (Cloud computing), contrary to what one might expect, their lexicons do not share a large number of common terms and 90\% of the terms (3,561/3,947) are just used by one provider. Thus, the APIs are lexically heterogeneous and there is not a consensus on which terms to use in Cloud computing. Further, we observe that the majority of the URIs, 54\%, follow the Contextualised Resource Names pattern, which is considered a good practice in REST API design. However, a majority of the URIs, 62.82\%, suffer from the Non-pertinent Documentation antipattern. Thus, we present three main contributions: (1) a tooled approach, called CloudLex, for extracting and analysing REST Cloud computing lexicons; (2) our analysis of the terms used in 16 REST APIs in 59,677 term occurrences; (3) our analysis of the linguistic (anti)patterns in more than 23,000 URIs of the 142 services of the 16 Cloud providers. We also show that CloudLex has an average precision of 84.82\%, recall of 63.57\%, and F1-measure of 71.03\% on one complete API, Docker Engine, which confirms the accuracy of our semantic analyses for the detection of linguistic (anti)patterns.},
	booktitle = {Cloud {Computing} and {Service} {Science}},
	publisher = {Springer International Publishing},
	author = {Petrillo, Fabio and Merle, Philippe and Palma, Francis and Moha, Naouel and Guéhéneuc, Yann-Gaël},
	editor = {Ferguson, Donald and Muñoz, Víctor Méndez and Cardoso, Jorge and Helfert, Markus and Pahl, Claus},
	year = {2018},
	pages = {308--332},
}

@inproceedings{li_li_design_2011,
	address = {Place of Publication: Los Alamitos, CA, USA; Washington, DC, USA. Country of Publication: USA.},
	title = {Design and {Describe} {REST} {API} without {Violating} {REST}: {A} {Petri} {Net} {Based} {Approach}},
	isbn = {978-1-4577-0842-8},
	url = {https://search.ebscohost.com/login.aspx?direct=true&db=inh&AN=12219308&lang=de&site=eds-live},
	doi = {10.1109/ICWS.2011.54},
	abstract = {As REST architectural style gains popularity in the web service community, there is a growing concern and debate on how to design Restful web services (REST API) in a proper way. We attribute this problem to lack of a standard model and language to describe a REST API that respects all the REST constraints. As a result, many web services that claim to be REST API are not hypermedia driven as prescribed by REST. This situation may lead to REST APIs that are not as scalable, extensible, and interoperable as promised by REST. To address this issue, this paper proposes REST Chart as a model and language to design and describe REST API without violating the REST constraints. REST Chart models a REST API as a special type of Colored Petri Net whose topology defines the REST API and whose token markings define the representational state space of user agents using that API. We demonstrate REST Chart with an example REST API. We also show how REST Chart can support efficient content negotiation and reuse hybrid representations to broaden design choices. Furthermore, we argue that the REST constraints, such as hypermedia driven and statelessness, can either be enforced naturally or checked automatically in REST Chart.},
	publisher = {IEEE Computer Society IEEE Comput. Soc. IEEE Comput. Soc.},
	author = {{Li Li} and {Wu Chou} and Foster, I. and Moser, L. and Zhang, J.},
	editor = {Foster, I. and Moser, L. and Zhang, J.},
	month = jan,
	year = {2011},
	keywords = {application program interfaces, Petri nets, Web services},
	annote = {Accession Number: 12219308. Digital Object Identifier: 10.1109/ICWS.2011.54. Conference Information: 2011 IEEE International Conference on Web Services (ICWS 2011). Washington, DC, USA, 20110704. Sponsoring Organizations: IEEE Comput. Soc.. ISBN: 978-1-4577-0842-8. Key Phrase Headings: REST API; RESTful Web services; REST constraints; REST chart models; colored Petri net. Classification: C6190J Internet software Classification: C1160 Combinatorial mathematics Classification: C6150E General utility programs. International Patent Classification: G06F9/46 Multiprogramming arrangements. Treatment: Practical. Number of References: 13. Document Number: 0b000064816421f9. Copyright Clearance Center: 978-0-7695-4463-2/11/\$26.00. Language: English. Publication Type: Conference Paper. Update Code: 2011038.},
	file = {Li Li et al. - 2011 - Design and Describe REST API without Violating RES.pdf:/Users/tmst/Zotero/storage/CDC6QQQE/Li Li et al. - 2011 - Design and Describe REST API without Violating RES.pdf:application/pdf},
}

@book{subramanian_hands-restful_2019,
	address = {Birmingham},
	title = {Hands-{On} {RESTful} {API} {Design} {Patterns} and {Best} {Practices} {Design}, {Develop}, and {Deploy} {Highly} {Adaptable}, {Scalable}, and {Secure} {RESTful} {Web} {APIs}},
	isbn = {978-1-78899-858-1},
	url = {https://search.ebscohost.com/login.aspx?direct=true&db=edsgvk&AN=edsgvk.104955535X&lang=de&site=eds-live},
	abstract = {REST architecture (style) is a pivot of distributed systems, simplify data integration amongst modern and legacy applications leverages through the RESTful paradigm. This book is fully loaded with many RESTful API patterns, samples, hands-on implementations and also discuss the capabilities of many REST API frameworks for Java, Scala, Python and Go},
	publisher = {Packt Publishing Ltd},
	author = {Subramanian, Harihara},
	year = {2019},
	keywords = {Representational State Transfer (Software architecture), Application program interfaces (Computer software), Web site development., Electronic books, Web sites-Design},
	annote = {Accession Number: edsgvk.104955535X; Contributors: Raj, Pethuru; Publication Type: Book; Language: English; Original material note: electronic bk.; Format: Text; Publication Date: 20190101; Other Identifiers: DE-627: 104955535X, DE-599: GBV104955535X, EBC: EBC5675589, EBL: EBL5675589, EBP: 041971175; Physical Description: 1 Online-Ressource (365 pages); Imprint: Birmingham: Packt Publishing Ltd, 2019.},
	file = {Hands-On RESTful API Design Patterns and Best Practices Design, develop, and deploy highly adaptable, scalable, and secure RESTful web APIs by Harihara Subramanian Pethuru Raj (z-lib.org).epub:/Users/tmst/Zotero/storage/7K9DQMZT/Hands-On RESTful API Design Patterns and Best Practices Design, develop, and deploy highly adaptable, scalable, and secure RESTful web APIs by Harihara Subramanian Pethuru Raj (z-lib.org).epub:application/epub+zip},
}

@book{bojinov_restful_2016,
	address = {Birmingham, UK},
	series = {Community experience distilled},
	title = {{RESTful} web {API} design with {Node}.js design and implement efficient {RESTful} solutions with this practical hands-on guide},
	isbn = {978-1-78646-320-3},
	url = {https://search.ebscohost.com/login.aspx?direct=true&db=edsgvk&AN=edsgvk.168018847X&lang=de&site=eds-live},
	abstract = {Design and implement efficient RESTful solutions with this practical hands-on guide About This Book Create a fully featured RESTful API solution from scratch. Learn how to leverage Node.JS, Express, MongoDB and NoSQL datastores to give an extra edge to your REST API design. Use this practical guide to integrate MongoDB in your Node.js application. Who This Book Is For The ideal target audience for this book is web developers who have some experience with RESTful services. Familiarity with basic JavaScript programming techniques is required. No prior experience with Node.JS or Express.js is required. What You Will Learn Install, develop, and test your own Node.js user modules Comprehend the differences between an HTTP and a RESTful application Optimize RESTful service URI routing with best practices Eliminate third-party dependencies in your tests with mocking Learn about NoSQL data stores and integrate MongoDB in your Node.js application with Mongoose Secure your services with NoSQL database integration within Node.js applications Enrich your development skills to create scalable, server-side, RESTful applications based on the Node.js platform In Detail In this era of cloud computing, every data provisioning solution is built in a scalable and fail-safe way. Thus, when building RESTful services, the right choice for the underlying platform is vital. Node.js, with its asynchronous, event-driven architecture, is exactly the right choice to build RESTful APIs. This book will help you enrich your development skills to create scalable, server-side, RESTful applications based on the Node.js platform. Starting with the fundamentals of REST, you will understand why RESTful web services are better data provisioning solution than other technologies. You will start setting up a development environment by installing Node.js, Express.js, and other modules. Next, you will write a simple HTTP request handler and create and test Node.js modules using automated tests and mock objects. You will then have to choose the most appropriate data storage type, having options between a key/value or document data store, and also you will implement automated tests for it. This module will evolve chapter by chapter until it turns into a full-fledged and secure Restful service. Style and approach Create state of the art RESTful API solutions leveraging Node.JS 4.x.},
	publisher = {Packt Publishing},
	author = {Bojinov, Valentin},
	year = {2016},
	keywords = {Node.js, Application program interfaces (Computer software), Electronic books, Design, eBook-ProQuest-O’Reilly-for-Higher-Education, local, Web sites, references-todo},
	annote = {Accession Number: edsgvk.168018847X; Publication Type: Book; Language: English; Format: Text; Publication Date: 20160101; Other Identifiers: DE-627: 168018847X, DE-599: KEP047702583, OCoLC: 1047882619, ORHE: 9781786469137, EBP: 047702583; Physical Description: 1 online resource (1 volume); illustrations.; Imprint: Birmingham, UK: Packt Publishing, 2016. Second edition.},
	file = {Bojinov - 2016 - RESTful web API design with Node.js design and imp.pdf:/Users/tmst/Zotero/storage/T2EGGLSQ/Bojinov - 2016 - RESTful web API design with Node.js design and imp.pdf:application/pdf},
}

@book{richardson_restful_2013,
	address = {Beijing},
	edition = {First edition},
	title = {{RESTful} {Web} {APIs}},
	isbn = {978-1-4493-5806-8},
	publisher = {O'Reilly},
	author = {Richardson, Leonard and Amundsen, Michael},
	year = {2013},
	note = {OCLC: ocn827841775},
	keywords = {Representational State Transfer (Software architecture), Application program interfaces (Computer software), Design, Web sites, Web site development},
	annote = {Includes index},
	file = {Richardson and Amundsen - 2013 - RESTful Web APIs.pdf:/Users/tmst/Zotero/storage/YL3Y3AK7/Richardson and Amundsen - 2013 - RESTful Web APIs.pdf:application/pdf},
}

@book{masse_rest_2012,
	address = {Beijing Köln},
	title = {{REST} {API} design rulebook: designing consistent {RESTful} {Web} {Service} {Interfaces}},
	isbn = {978-1-4493-1050-9},
	shorttitle = {{REST} {API} design rulebook},
	language = {eng},
	publisher = {O'Reilly},
	author = {Massé, Mark H. and Massé, Mark},
	year = {2012},
	annote = {Formerly CIP Uk},
	file = {REST API Design Rulebook by Mark Masse (z-lib.org).pdf:/Users/tmst/Zotero/storage/VPMK2SL2/REST API Design Rulebook by Mark Masse (z-lib.org).pdf:application/pdf},
}

@article{berners-lee_world-wide_1994,
	title = {The {World}-{Wide} {Web}},
	volume = {37},
	issn = {0001-0782, 1557-7317},
	url = {https://dl.acm.org/doi/10.1145/179606.179671},
	doi = {10.1145/179606.179671},
	language = {en},
	number = {8},
	urldate = {2021-10-25},
	journal = {Commun. ACM},
	author = {Berners-Lee, Tim and Cailliau, Robert and Luotonen, Ari and Nielsen, Henrik Frystyk and Secret, Arthur},
	month = aug,
	year = {1994},
	pages = {76--82},
}

@article{fielding_apache_1997,
	title = {The {Apache} {HTTP} {Server} {Project}},
	volume = {1},
	issn = {10897801},
	url = {http://ieeexplore.ieee.org/document/612229/},
	doi = {10.1109/4236.612229},
	number = {4},
	urldate = {2021-10-25},
	journal = {IEEE Internet Comput.},
	author = {Fielding, R.T. and Kaiser, G.},
	month = aug,
	year = {1997},
	pages = {88--90},
}

@misc{rodriguez_restful_2008,
	title = {{RESTful} {Web} services: {The} basics},
	url = {http://www.ibm.com/developerworks/webservices/library/ws-restful/},
	abstract = {Representational State Transfer (REST) has gained widespread acceptance across the Web as a simpler alternative to SOAP- and Web Services Description Language (WSDL)-based Web services. Key evidence of this shift in interface design is the adoption of REST by mainstream Web 2.0 service providers including Yahoo, Google, and Facebook who have deprecated or passed on SOAP and WSDL-based interfaces in favor of an easier-to-use, resource-oriented model to expose their services. In this article, Alex Rodriguez introduces you to the basic principles of REST.},
	author = {Rodriguez, Alex},
	year = {2008},
	keywords = {*file-import-13-09-19 rest},
	file = {Rodriguez - 2008 - RESTful Web services The basics.pdf:/Users/tmst/Zotero/storage/RZF64654/Rodriguez - 2008 - RESTful Web services The basics.pdf:application/pdf;rodriguez-restfulWS.pdf:/Users/tmst/Zotero/storage/2566HSIF/rodriguez-restfulWS.pdf:application/pdf},
}

@article{richardson_justice_2008,
	title = {Justice {Will} {Take} {Us} {Millions} {Of} {Intricate} {Moves}. {Act} {Three}: {The} {Maturity} {Heuristic}},
	url = {http://www.crummy.com/writing/speaking/2008-QCon/act3.html},
	author = {Richardson, Leonard},
	year = {2008},
	keywords = {REST maturity},
	annote = {Richardsons Maturity Model},
}

@article{fowler_richardson_2010,
	title = {Richardson {Maturity} {Model}: {Steps} toward the glory of {REST}},
	url = {http://martinfowler.com/articles/richardsonMaturityModel.html},
	author = {Fowler, Martin},
	year = {2010},
	keywords = {REST},
}

@misc{fielding_rest_2008,
	title = {{REST} {APIs} must be hypertext-driven},
	url = {http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven},
	author = {Fielding, Roy},
	year = {2008},
	keywords = {REST},
}

@inproceedings{fielding_architectural_2000,
	title = {Architectural {Styles} and the {Design} of {Network}-based {Software} {Architectures}"; {Doctoral} dissertation},
	isbn = {978-0-599-87118-2},
	author = {Fielding, Roy T.},
	year = {2000},
	file = {Fielding - 2000 - Architectural Styles and the Design of Network-bas.pdf:/Users/tmst/Zotero/storage/HBJU8RJ7/Fielding - 2000 - Architectural Styles and the Design of Network-bas.pdf:application/pdf},
}

@inproceedings{salvadori_maturity_2015,
	address = {New York, NY, USA},
	title = {A {Maturity} {Model} for {Semantic} {RESTful} {Web} {APIs}},
	isbn = {978-1-4673-7272-5},
	url = {http://ieeexplore.ieee.org/document/7195633/},
	doi = {10.1109/ICWS.2015.98},
	urldate = {2021-10-25},
	booktitle = {2015 {IEEE} {International} {Conference} on {Web} {Services}},
	publisher = {IEEE},
	author = {Salvadori, Ivan and Siqueira, Frank},
	month = jun,
	year = {2015},
	pages = {703--710},
	annote = {Gibt überblick über related work},
	annote = {Referenziert Richardson},
	file = {Salvadori and Siqueira - 2015 - A Maturity Model for Semantic RESTful Web APIs.pdf:/Users/tmst/Zotero/storage/9R69R7BP/Salvadori and Siqueira - 2015 - A Maturity Model for Semantic RESTful Web APIs.pdf:application/pdf},
}

@incollection{fujita_rest_2020,
	title = {{REST} {API} {Auto} {Generation}: {A} {Model}-{Based} {Approach}},
	isbn = {978-1-64368-114-6 978-1-64368-115-3},
	shorttitle = {{REST} {API} {Auto} {Generation}},
	url = {http://ebooks.iospress.nl/doi/10.3233/FAIA200570},
	abstract = {Most of software products, especially mobile applications (apps) rely on a back-end web services to communicate with a shared data repository. Statistics have demonstrated exponential demand on web services, mainly REST, due to the continuous adoption of IoT (Internet of Things) and Cloud Computing. However, the development of back-end REST web services is not a trivial task, and can be intimidating even for seasoned developers. Despite the fact that there are several studies that focus on automatic generation of REST APIs, we argue that those approaches violate the rules of code flexibility and are not appropriate for novice developers. In this study, we present an approach and a framework, named RAAG (REST Api Auto-Generation), that aims to improve productivity by simplifying the development of REST web services. Our RAAG framework abstracts layers, where code generation has been avoided due its limitations. A preliminary evaluation shows that RAAG can significantly improves development productivity and is easy to operate even by novice developers.},
	urldate = {2021-10-25},
	booktitle = {Frontiers in {Artificial} {Intelligence} and {Applications}},
	publisher = {IOS Press},
	author = {Hussein, Salah and Zein, Samer and Salleh, Norsaremah},
	editor = {Fujita, Hamido and Selamat, Ali and Omatu, Sigeru},
	month = sep,
	year = {2020},
	doi = {10.3233/FAIA200570},
}

@inproceedings{zhou_rest_2014,
	address = {BC, Canada},
	title = {{REST} {API} {Design} {Patterns} for {SDN} {Northbound} {API}},
	isbn = {978-1-4799-2653-4 978-1-4799-2652-7},
	url = {http://ieeexplore.ieee.org/document/6844664/},
	doi = {10.1109/WAINA.2014.153},
	urldate = {2021-10-25},
	booktitle = {2014 28th {International} {Conference} on {Advanced} {Information} {Networking} and {Applications} {Workshops}},
	publisher = {IEEE},
	author = {Zhou, Wei and Li, Li and Luo, Min and Chou, Wu},
	month = may,
	year = {2014},
	keywords = {todo},
	pages = {358--365},
	file = {Zhou et al. - 2014 - REST API Design Patterns for SDN Northbound API.pdf:/Users/tmst/Zotero/storage/YISWLZIN/Zhou et al. - 2014 - REST API Design Patterns for SDN Northbound API.pdf:application/pdf},
}

@techreport{isoiec_25010_isoiec_2011,
	title = {{ISO}/{IEC} 25010:2011, {Systems} and software engineering — {Systems} and software {Quality} {Requirements} and {Evaluation} ({SQuaRE}) — {System} and software quality models},
	author = {ISO/IEC 25010},
	year = {2011},
	keywords = {ISO Softwarequalität},
}

@misc{parecki_oauth_2021,
	title = {{OAuth} 2.0 — {OAuth}},
	url = {https://oauth.net/2/},
	urldate = {2021-10-25},
	author = {Parecki, Aaron},
	year = {2021},
	file = {OAuth 2.0 — OAuth:/Users/tmst/Zotero/storage/BQZPMYQB/2.html:text/html},
}

@misc{hewlett_packard_enterprise_development_lp_oauth_2021,
	title = {{OAuth} {APIs} for {Access} {Token}},
	url = {https://developer.arubanetworks.com/aruba-central/docs/api-oauth-access-token},
	urldate = {2021-10-25},
	author = {Hewlett Packard Enterprise Development LP},
	year = {2021},
	file = {OAuth APIs for Access Token:/Users/tmst/Zotero/storage/VMSMS9TR/api-oauth-access-token.html:text/html},
}

@misc{berners-lee_uniform_2005,
	title = {Uniform {Resource} {Identifier} ({URI}): {Generic} {Syntax}},
	url = {http://www.ietf.org/rfc/rfc3986.txt},
	abstract = {A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]},
	publisher = {IETF},
	author = {Berners-Lee, T. and Fielding, R. and Masinter, L.},
	month = jan,
	year = {2005},
	note = {Backup Publisher: Internet Engineering Task Force
Issue: 3986
Series: Request for Comments
Published: RFC 3986 (Standard)},
	keywords = {imported},
}

@techreport{hardt_rfc_2012,
	title = {{RFC} 6749},
	url = {https://datatracker.ietf.org/doc/html/rfc6749},
	urldate = {2021-10-25},
	author = {Hardt, Dick},
	year = {2012},
	file = {rfc6749:/Users/tmst/Zotero/storage/UXNYLLQ5/rfc6749.html:text/html},
}

@techreport{crockford_rfc_2006,
	title = {{RFC} 4627},
	url = {https://datatracker.ietf.org/doc/html/rfc4627},
	urldate = {2021-10-25},
	author = {Crockford, D},
	year = {2006},
}

@book{sallai_asynchronous_2021,
	title = {Asynchronous {Programming} {Patterns} in {Javascript}: {How} to {Use} {Async}/{Await} and {Promises} to {Solve} {Programming} {Problems}},
	url = {https://www.amazon.de/-/en/Tam%C3%A1s-Sallai-ebook/dp/B08VN4N3G6},
	abstract = {Asynchronous programming is everywhere in Javascript. This is the result of the fundamental choices that define how it works. In other languages, you can use multiple threads and that allows synchronous waiting, a crucial feature missing from Javascript. It is by design single-threaded and a wait operation stops everything, just think of the case where a long calculation freezes the UI.

Without a way to wait for a later result synchronously, Javascript needs to use callbacks. Even simple things like waiting for a given duration requires a function that will be run when the time is up.

You can find this pattern everywhere, as most of the things are asynchronous in nature. Using fetch to make an HTTP call to a server is an async operation. Just like getting information about the available cameras and microphones with the getUserMedia call, as it needs to get permission from the user. Same with reading and writing files. While these have synchronous versions for now, they are terrible for performance. Or want to do some web scraping with Puppeteer? Every single instruction is asynchronous as all of them communicate with a remote process. Or for backend applications, reading or writing data to a database is also inherently async.

And not only that some functions are async but all the other functions that call them need to be async too. A piece of functionality that requires making a network call, for example, is asynchronous, no matter how insignificant that call is compared to what other things the function is doing. Because of this, almost all Javascript applications consist of mostly asynchronous operations.

Over the years, the language got a lot of features that make writing async code easier. Gone are the days of the so-called callback hell where a series of callback-based async calls made the program's structure very hard to understand and easy to inadvertently silence errors.

But asynchronous programming is inherently hard. While the language helps with the syntax to make understanding and writing code easier, asynchronicity introduces a lot of potential errors, most of them so subtle they only occur in special circumstances.

Even though I've been working for many years with asynchronous code, some of the problems in this book took me a week to reach a solution I'm happy with. My goal with this book is that you'll have an easier time when you encounter similar problems by knowing what are the hard parts. This way you won't need to start from zero but you'll have a good idea of what are the roadblocks and the best practices.

This book is divided into two parts.

The first chapter is an introduction to async/await and Promises and how each piece of the async puzzle fit together. The primary focus is async functions as they are the mainstream way to program asynchronously in Javascript. But async/await is a kind of magic without knowing about Promises, so you'll learn about them too.

By the end of the first chapter, you'll have a good understanding of how to use async functions and how they work under the hood.

The second part of the book consists of several common programming tasks and problems. You'll learn when that particular problem is important, how to solve it, and what are the edge cases. This gives you a complete picture so that when you encounter a similar problem you'll know how to approach it.

This book is not meant to be read from cover to cover but to be used as a reference guide. With the patterns described in this book, my hope is that you'll see the underlying difficulty with async programming so when you work on your own solutions you'll know the pitfalls and best practices so you'll end up with more reliable code.},
	author = {Sallai, Tamas},
	year = {2021},
}

@book{parker_javascript_2015,
	address = {Beijing},
	edition = {First Edition},
	title = {{JavaScript} with promises},
	isbn = {978-1-4493-7321-4},
	abstract = {If you're a developer moving to an environments that make heavy use of asynchronous APIs, such as Node, WinRT, or Chrome packaged apps, this book how to make use of Promise constructs. JavaScript routinely supports asynchronous code, setting something up with no expectation of when a response might come back. Unfortunately, writing code in that style is difficult for humans, and Promises are a key set of tools for bridging that gap. This book shows you how to use these tools, and also demonstrates techniques that enable you to use features like IndexedDB or WebRTC. --},
	publisher = {O'Reilly},
	author = {Parker, Daniel},
	year = {2015},
	note = {OCLC: ocn896906406},
	keywords = {Web site development, JavaScript (Computer program language)},
	annote = {Includes index},
}

@book{brown_learning_2016,
	address = {Beijing Boston Farnham Sebastopol Tokyo},
	edition = {Third edition},
	title = {Learning {JavaScript}: {JavaScript} {Essentials} for {Modern} {Application} {Development}},
	isbn = {978-1-4919-1491-5},
	language = {eng},
	publisher = {O'Reilly},
	author = {Brown, Ethan},
	year = {2016},
	annote = {Titelzusatz auf dem Umschlag: "Add sparkle and life to your web pages" Previous edition: published by Shelley Powers. 2009},
}

@inproceedings{loring_semantics_2017,
	address = {Vancouver BC Canada},
	title = {Semantics of asynchronous {JavaScript}},
	isbn = {978-1-4503-5526-1},
	url = {https://dl.acm.org/doi/10.1145/3133841.3133846},
	doi = {10.1145/3133841.3133846},
	language = {en},
	urldate = {2021-10-25},
	booktitle = {Proceedings of the 13th {ACM} {SIGPLAN} {International} {Symposium} on on {Dynamic} {Languages}},
	publisher = {ACM},
	author = {Loring, Matthew C. and Marron, Mark and Leijen, Daan},
	month = oct,
	year = {2017},
	pages = {51--62},
	file = {Full Text:/Users/tmst/Zotero/storage/M6J5VDGW/Loring et al. - 2017 - Semantics of asynchronous JavaScript.pdf:application/pdf},
}

@article{li_design_2016,
	title = {Design {Patterns} and {Extensibility} of {REST} {API} for {Networking} {Applications}},
	volume = {13},
	issn = {1932-4537},
	url = {http://ieeexplore.ieee.org/document/7378522/},
	doi = {10.1109/TNSM.2016.2516946},
	number = {1},
	urldate = {2021-10-26},
	journal = {IEEE Trans. Netw. Serv. Manage.},
	author = {Li, Li and Chou, Wu and Zhou, Wei and Luo, Min},
	month = mar,
	year = {2016},
	pages = {154--167},
	file = {Li et al. - 2016 - Design Patterns and Extensibility of REST API for .pdf:/Users/tmst/Zotero/storage/WL5FPBQG/Li et al. - 2016 - Design Patterns and Extensibility of REST API for .pdf:application/pdf},
}

@inproceedings{haupt_framework_2017,
	address = {Gothenburg, Sweden},
	title = {A {Framework} for the {Structural} {Analysis} of {REST} {APIs}},
	isbn = {978-1-5090-5729-0},
	url = {http://ieeexplore.ieee.org/document/7930199/},
	doi = {10.1109/ICSA.2017.40},
	urldate = {2021-10-26},
	booktitle = {2017 {IEEE} {International} {Conference} on {Software} {Architecture} ({ICSA})},
	publisher = {IEEE},
	author = {Haupt, Florian and Leymann, Frank and Scherer, Anton and Vukojevic-Haupt, Karolina},
	month = apr,
	year = {2017},
	pages = {55--58},
	file = {Haupt et al. - 2017 - A Framework for the Structural Analysis of REST AP.pdf:/Users/tmst/Zotero/storage/8Z7NS25H/Haupt et al. - 2017 - A Framework for the Structural Analysis of REST AP.pdf:application/pdf},
}

@book{tilkov_rest_2015,
	address = {Heidelberg},
	edition = {3., aktualisierte und erw. Aufl},
	title = {{REST} und {HTTP}: {Entwicklung} und {Integration} nach dem {Architekturstil} des {Web}},
	isbn = {978-3-86490-120-1},
	shorttitle = {{REST} und {HTTP}},
	language = {ger},
	publisher = {dpunkt-Verl},
	editor = {Tilkov, Stefan},
	year = {2015},
	file = {Table of Contents PDF:/Users/tmst/Zotero/storage/AJUZECG8/Tilkov - 2015 - REST und HTTP Entwicklung und Integration nach de.pdf:application/pdf;REST und HTTP. www.dpunkt.de_plus.pdf:/Users/tmst/Zotero/storage/SG5KNBXL/REST und HTTP. www.dpunkt.de_plus.pdf:application/pdf},
}

@book{doglio_pro_2015,
	address = {New York, NY},
	series = {The expert's voice in we development},
	title = {Pro rest api development with {Node}.js},
	isbn = {978-1-4842-0918-9},
	publisher = {Apress},
	author = {Doglio, Fernando},
	year = {2015},
	keywords = {Application program interfaces (Computer software), JavaScript (Computer program language), Application software, Development, references-todo},
	annote = {DHBW Bib
 },
	annote = {Includes index Minimal Level Cataloging Plus},
	file = {Doglio - 2015 - Pro rest api development with Node.js.pdf:/Users/tmst/Zotero/storage/WFZN6FSH/Doglio - 2015 - Pro rest api development with Node.js.pdf:application/pdf},
}

@book{doglio_rest_2018,
	address = {Berkeley, CA},
	edition = {2nd ed. 2018},
	title = {{REST} {API} {Development} with {Node}.js: {Manage} and {Understand} the {Full} {Capabilities} of {Successful} {REST} {Development}},
	isbn = {978-1-4842-3715-1},
	shorttitle = {{REST} {API} {Development} with {Node}.js},
	abstract = {Manage and understand the full capabilities of successful REST development. REST API development is a hot topic in the programming world, but not many resources exist for developers to really understand how you can leverage the advantages. This completely updated second edition provides a brief background on REST and the tools it provides (well known and not so well known), then explains how there is more to REST than just JSON and URLs. You will learn about the maintained modules currently available in the npm community, including Express, Restify, Vatican, and Swagger. Finally you will code an example API from start to finish, using a subset of the tools covered. The Node community is currently flooded with modules; some of them are published once and never updated again - cluttering the entire universe of packages. Pro REST API Development with Node.js shines light into that black hole of modules for the developers trying to create an API. Understand REST API development with Node.js using this book today},
	publisher = {Apress : Imprint: Apress},
	author = {Doglio, Fernando},
	year = {2018},
	doi = {10.1007/978-1-4842-3715-1},
	keywords = {Computer programming, Software engineering, Software Engineering/Programming and Operating Systems, Web Development, references-todo},
	annote = {1. REST 101 -- 2. API Design Best Practices -- 3. Node.js and REST -- 4. Architecting a REST API -- 5. Working with Modules -- 6. Planning Your REST API -- 7. Developing Your REST API -- 8. Testing Your REST API -- 9. Deploying Your REST API -- 10. Troubleshooting},
	file = {Doglio - 2018 - REST API Development with Node.js Manage and Unde.pdf:/Users/tmst/Zotero/storage/Q8XWZ7I8/Doglio - 2018 - REST API Development with Node.js Manage and Unde.pdf:application/pdf},
}

@book{goncalves_beginning_2009,
	address = {Berkeley, Calif},
	series = {The expert's voice in {Java} technology},
	title = {Beginning {Java} {EE} 6 {Platform} with {GlassFish} 3: from novice to professional ; [learn the new {Java} {EE} 6 platform from an expert enterprise developer and participant in the {Java} {Community} {Process} {Java} {EE} 6 expert group]},
	isbn = {978-1-4302-1954-5},
	shorttitle = {Beginning {Java} {EE} 6 {Platform} with {GlassFish} 3},
	language = {eng},
	publisher = {Apress},
	author = {Goncalves, Antonio},
	year = {2009},
	annote = {pp 429-462 über REST},
	file = {2009 - RESTful Web Services.pdf:/Users/tmst/Zotero/storage/CHNQLBGK/2009 - RESTful Web Services.pdf:application/pdf},
}

@incollection{presutti_restful_2014,
	address = {Cham},
	title = {{RESTful} or {RESTless} – {Current} {State} of {Today}’s {Top} {Web} {APIs}},
	volume = {8798},
	isbn = {978-3-319-11954-0 978-3-319-11955-7},
	url = {http://link.springer.com/10.1007/978-3-319-11955-7_6},
	language = {en},
	urldate = {2021-10-31},
	booktitle = {The {Semantic} {Web}: {ESWC} 2014 {Satellite} {Events}},
	publisher = {Springer International Publishing},
	author = {Bülthoff, Frederik and Maleshkova, Maria},
	editor = {Presutti, Valentina and Blomqvist, Eva and Troncy, Raphael and Sack, Harald and Papadakis, Ioannis and Tordai, Anna},
	year = {2014},
	doi = {10.1007/978-3-319-11955-7_6},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {64--74},
	annote = {Comment: 12 pages},
	file = {Submitted Version:/Users/tmst/Zotero/storage/X2BQL5XD/Bülthoff and Maleshkova - 2014 - RESTful or RESTless – Current State of Today’s Top.pdf:application/pdf},
}

@article{kopecky_history_2014,
	title = {A history and future of {Web} {APIs}},
	volume = {56},
	issn = {2196-7032, 1611-2776},
	url = {https://www.degruyter.com/document/doi/10.1515/itit-2013-1035/html},
	doi = {10.1515/itit-2013-1035},
	abstract = {Abstract
            Distributed information systems predominantly have client-server
architectures, as does the Web itself. In this article, we review the
evolution of the interface of client-server distributed systems, from
Messaging and RPC systems that predate the Web, to RESTful Web APIs. We
highlight the often overlooked importance of the client-server interface in
Web applications, and we reference historic and current systems to discuss
the roles of “Web Service” technologies and Service-Oriented Architectures.
Considering the future, we point out four directions in which we can see Web
APIs moving, including the incorporation of hypermedia and semantics.},
	language = {en},
	number = {3},
	urldate = {2021-10-31},
	journal = {it - Information Technology},
	author = {Kopecký, Jacek and Fremantle, Paul and Boakes, Rich},
	month = jun,
	year = {2014},
	pages = {90--97},
	file = {Submitted Version:/Users/tmst/Zotero/storage/VEDR6A97/Kopecký et al. - 2014 - A history and future of Web APIs.pdf:application/pdf},
}

@misc{m-way_solutions_10_2014,
	title = {10 {Best} {Practices} for {Better} {RESTful} {API} {\textbar} by {M}-{Way} {Solutions} {\textbar} {Medium}},
	url = {https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291},
	urldate = {2021-10-31},
	author = {M-Way Solutions},
	year = {2014},
	file = {10 Best Practices for Better RESTful API | by M-Way Solutions | Medium:/Users/tmst/Zotero/storage/BT94V8EE/10-best-practices-for-better-restful-api-cbe81b06f291.html:text/html},
}

@article{palma_semantic_2017,
	title = {Semantic {Analysis} of {RESTful} {APIs} for the {Detection} of {Linguistic} {Patterns} and {Antipatterns}},
	volume = {26},
	issn = {0218-8430, 1793-6365},
	url = {https://www.worldscientific.com/doi/abs/10.1142/S0218843017420011},
	doi = {10.1142/S0218843017420011},
	abstract = {Identifier lexicon may have a direct impact on software understandability and reusability and, thus, on the quality of the final software product. Understandability and reusability are two important characteristics of software quality. REpresentational State Transfer (REST) style is becoming a de facto standard adopted by software organizations to build their Web applications. Understandable and reusable Uniform Resource Identifers (URIs) are important to attract client developers of RESTful APIs because good URIs support the client developers to understand and reuse the APIs. Consequently, the use of proper lexicon in RESTful APIs has also a direct impact on the quality of Web applications that integrate these APIs. Linguistic antipatterns represent poor practices in the naming, documentation, and choice of identifiers in the APIs as opposed to linguistic patterns that represent the corresponding best practices. In this paper, we present the Semantic Analysis of RESTful APIs (SARA) approach that employs both syntactic and semantic analyses for the detection of linguistic patterns and antipatterns in RESTful APIs. We provide detailed definitions of 12 linguistic patterns and antipatterns and define and apply their detection algorithms on 18 widely-used RESTful APIs, including Facebook, Twitter, and Dropbox. Our detection results show that linguistic patterns and antipatterns do occur in major RESTful APIs in particular in the form of poor documentation practices. Those results also show that SARA can detect linguistic patterns and antipatterns with higher accuracy compared to its state-of-the-art approach — DOLAR.},
	language = {en},
	number = {02},
	urldate = {2021-10-31},
	journal = {Int. J. Coop. Info. Syst.},
	author = {Palma, Francis and Gonzalez-Huerta, Javier and Founi, Mohamed and Moha, Naouel and Tremblay, Guy and Guéhéneuc, Yann-Gaël},
	month = jun,
	year = {2017},
	pages = {1742001},
}

@misc{sahni_best_2020,
	title = {Best {Practices} for {Designing} a {Pragmatic} {RESTful} {API}},
	url = {https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api},
	abstract = {An API is a user interface for a developer. Learn the best practices to make an API that is easy to adopt and pleasant to use.},
	urldate = {2021-10-31},
	journal = {Vinay Sahni},
	author = {Sahni, Vinay},
	year = {2020},
	file = {Snapshot:/Users/tmst/Zotero/storage/QKHBXQ4R/best-practices-for-a-pragmatic-restful-api.html:text/html},
}

@misc{haldar_restful_2016,
	title = {{RESTful} {API} {Designing} guidelines — {The} best practices {\textbar} {Hacker} {Noon}},
	url = {https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9},
	language = {en},
	urldate = {2021-10-31},
	author = {Haldar, Mahesh},
	year = {2016},
	file = {Snapshot:/Users/tmst/Zotero/storage/KITPZA25/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9.html:text/html},
}

@incollection{bozzon_benchmarking_2016,
	address = {Cham},
	title = {Benchmarking {Web} {API} {Quality}},
	volume = {9671},
	isbn = {978-3-319-38790-1 978-3-319-38791-8},
	url = {https://link.springer.com/10.1007/978-3-319-38791-8_11},
	language = {en},
	urldate = {2021-10-31},
	booktitle = {Web {Engineering}},
	publisher = {Springer International Publishing},
	author = {Bermbach, David and Wittern, Erik},
	editor = {Bozzon, Alessandro and Cudre-Maroux, Philippe and Pautasso, Cesare},
	year = {2016},
	doi = {10.1007/978-3-319-38791-8_11},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {188--206},
	file = {Bermbach and Wittern - 2016 - Benchmarking Web API Quality.pdf:/Users/tmst/Zotero/storage/2F7GR42Z/Bermbach and Wittern - 2016 - Benchmarking Web API Quality.pdf:application/pdf},
}

@misc{price_web_2021,
	title = {Web {API} design best practices - {Azure} {Architecture} {Center}},
	url = {https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design},
	abstract = {Learn the best practices for designing web APIs that support platform independence and service evolution.},
	language = {en-us},
	urldate = {2021-10-31},
	author = {Price, Ed},
	month = jul,
	year = {2021},
	keywords = {references-todo},
	file = {Snapshot:/Users/tmst/Zotero/storage/YELWVPXQ/api-design.html:text/html},
}

@book{richardson_restful_2007,
	address = {Farnham},
	title = {{RESTful} web services},
	isbn = {978-0-596-52926-0},
	publisher = {O'Reilly},
	author = {Richardson, Leonard and Ruby, Sam},
	year = {2007},
	note = {OCLC: ocm82671871},
	keywords = {Web services},
	annote = {Includes index},
	file = {Richardson and Ruby - 2007 - RESTful web services.pdf:/Users/tmst/Zotero/storage/ZVYLIXIY/Richardson and Ruby - 2007 - RESTful web services.pdf:application/pdf},
}

@book{webber_rest_2010,
	address = {Beijing Köln},
	edition = {1. ed},
	series = {Theory in practice},
	title = {{REST} in practice: hypermedia and systems architecture},
	isbn = {978-0-596-80582-1},
	shorttitle = {{REST} in practice},
	language = {eng},
	publisher = {O'Reilly},
	author = {Webber, Jim and Parastatidis, Savas and Robinson, Ian},
	year = {2010},
	annote = {This book offers a down-to-earth explanation of REST, with techniques and examples that show you how to design and implement integration solutions using the REST architectural style REST continues to gain momentum as the best method for building web services, leaving many web architects to consider whether and how to include this approach in their SOA and SOAP-dominated world. This book offers a down-to-earth explanation of REST, with techniques and examples that show you how to design and implement integration solutions using the REST architectural style. * Explore several web communications approaches, and discover what makes REST different * Walk through the pros and cons of the RESTful approach * Learn how the underlying architecture of the Web can drastically simplify programming built on top of it * View REST in the context of cloud computing and the Semantic Web * Understand how hypermedia serves as a model for computers to process data},
	file = {REST in Practice Hypermedia and Systems Architecture by Jim Webber, Savas Parastatidis, Ian Robinson (z-lib.org).pdf:/Users/tmst/Zotero/storage/5E68I7KT/REST in Practice Hypermedia and Systems Architecture by Jim Webber, Savas Parastatidis, Ian Robinson (z-lib.org).pdf:application/pdf},
}

@misc{megginson_rest_2007,
	title = {{REST}: the quick pitch {\textbar} {Quoderat}},
	url = {https://quoderat.megginson.com/2007/02/15/rest-the-quick-pitch/},
	urldate = {2021-11-02},
	author = {Megginson, David},
	year = {2007},
	file = {REST\: the quick pitch | Quoderat:/Users/tmst/Zotero/storage/6I3CQ2VL/rest-the-quick-pitch.html:text/html},
}

@inproceedings{pardon_atomic_2014,
	address = {Seoul Korea},
	title = {Atomic distributed transactions: a {RESTful} design},
	isbn = {978-1-4503-2745-9},
	shorttitle = {Atomic distributed transactions},
	url = {https://dl.acm.org/doi/10.1145/2567948.2579221},
	doi = {10.1145/2567948.2579221},
	language = {en},
	urldate = {2021-11-02},
	booktitle = {Proceedings of the 23rd {International} {Conference} on {World} {Wide} {Web}},
	publisher = {ACM},
	author = {Pardon, Guy and Pautasso, Cesare},
	month = apr,
	year = {2014},
	pages = {943--948},
}

@book{allamaraju_restful_2010,
	address = {Beijing ; Sebastopol,CA},
	edition = {1st ed},
	title = {{RESTful} {Web} services cookbook},
	isbn = {978-0-596-80168-7},
	publisher = {O'Reilly},
	author = {Allamaraju, Subrahmanyam},
	year = {2010},
	note = {OCLC: ocn441177208},
	keywords = {Todo-komplett, references-todo},
	file = {Allamaraju - 2010 - RESTful Web services cookbook.pdf:/Users/tmst/Zotero/storage/4H72QXL2/Allamaraju - 2010 - RESTful Web services cookbook.pdf:application/pdf},
}

@misc{hewlett_packard_enterprise_development_lp_aruba_2021-1,
	title = {Aruba {Central} {API} {Documentation}},
	publisher = {Aruba},
	author = {Hewlett Packard Enterprise Development LP},
	year = {2021},
}

@misc{hewlett_packard_enterprise_development_lp_access_2021,
	title = {Access {Points} {\textbar} {Aruba}},
	url = {https://www.arubanetworks.com/de/products/drahtlos/access-points/},
	urldate = {2021-11-10},
	author = {Hewlett Packard Enterprise Development LP},
	year = {2021},
	file = {Access Points | Aruba:/Users/tmst/Zotero/storage/DP8CP39V/access-points.html:text/html},
}

@misc{levy_trend_2005,
	title = {The {Trend} {Spotter} {\textbar} {WIRED}},
	url = {https://www.wired.com/2005/10/oreilly/},
	urldate = {2021-11-10},
	author = {Levy, Steven},
	year = {2005},
}

@misc{richardson_beautifulsoup4_2021,
	title = {beautifulsoup4: {Screen}-scraping library},
	copyright = {MIT License},
	shorttitle = {beautifulsoup4},
	url = {http://www.crummy.com/software/BeautifulSoup/bs4/},
	urldate = {2021-11-10},
	author = {Richardson, Leonard},
	year = {2021},
	keywords = {Software Development - Libraries - Python Modules, Text Processing - Markup - HTML, Text Processing - Markup - SGML, Text Processing - Markup - XML},
	file = {Snapshot:/Users/tmst/Zotero/storage/SLUMU5UP/beautifulsoup4.html:text/html},
}

@misc{richardson_code_2021,
	title = {Code : {Leonard} {Richardson}},
	shorttitle = {Code},
	url = {https://code.launchpad.net/%7Eleonardr/+branches},
	language = {en},
	urldate = {2021-11-10},
	journal = {Launchpad},
	author = {Richardson, Leonard},
	year = {2021},
	file = {Snapshot:/Users/tmst/Zotero/storage/SBGBNWGN/+branches.html:text/html},
}

@misc{richardson_leonard_2021,
	title = {Leonard {Richardson} - {Software} {Architect} - {The} {New} {York} {Public} {Library} {\textbar} {LinkedIn}},
	url = {https://www.linkedin.com/in/leonardr},
	abstract = {View Leonard Richardson’s profile on LinkedIn, the world’s largest professional community. Leonard has 5 jobs listed on their profile. See the complete profile on LinkedIn and discover Leonard’s connections and jobs at similar companies.},
	language = {en},
	urldate = {2021-11-10},
	author = {Richardson, Leonard},
	year = {2021},
	file = {Snapshot:/Users/tmst/Zotero/storage/K7GKXGWA/leonardr.html:text/html},
}

@misc{richardson_l_2021,
	title = {L. {Richardson} {\textbar} {Semantic} {Scholar}},
	url = {https://www.semanticscholar.org/author/L.-Richardson/153443626},
	abstract = {Semantic Scholar profile for L. Richardson, with 131 highly influential citations and 11 scientific research papers.},
	language = {en},
	urldate = {2021-11-10},
	author = {Richardson, Leonard},
	year = {2021},
	file = {Snapshot:/Users/tmst/Zotero/storage/ANHEMD5S/153443626.html:text/html},
}

@misc{palma_francis_2021,
	title = {Francis {Palma}, {PhD}},
	url = {https://scholar.google.com/citations?user=hzmzRsEAAAAJ&hl=en},
	abstract = {‪Assistant Professor, Linnaeus University‬ - ‪‪Cited by 663‬‬ - ‪Empirical Software Engineering‬ - ‪Web APIs Analysis‬ - ‪Source Code Analysis‬},
	urldate = {2021-11-10},
	author = {Palma, Francis},
	year = {2021},
	file = {Snapshot:/Users/tmst/Zotero/storage/YLABISDG/citations.html:text/html},
}

@misc{pautasso_prof_2021,
	title = {Prof. {Dr}. {Cesare} {Pautasso}},
	url = {http://www.pautasso.info/},
	urldate = {2021-11-10},
	author = {Pautasso, Cesare},
	year = {2021},
	file = {Prof. Dr. Cesare Pautasso:/Users/tmst/Zotero/storage/2A84ZNQ8/www.pautasso.info.html:text/html},
}

@techreport{berners-lee_rfc_2005,
	title = {{RFC} 3986},
	url = {https://datatracker.ietf.org/doc/html/rfc3986},
	urldate = {2021-11-10},
	author = {Berners-Lee, Tim and Fielding, Roy and Masinter, Larry},
	year = {2005},
	file = {rfc3986:/Users/tmst/Zotero/storage/8QQNGDNZ/rfc3986.html:text/html},
}

@techreport{jones_oauth_2012,
	type = {{RFC}},
	title = {The {OAuth} 2.0 {Authorization} {Framework}: {Bearer} {Token} {Usage}},
	url = {http://www.rfc-editor.org/rfc/rfc6750.txt},
	number = {6750},
	institution = {RFC Editor},
	author = {Jones, M. and Hardt, D.},
	month = oct,
	year = {2012},
	note = {Backup Publisher: RFC Editor
ISSN: 2070-1721
Published: Internet Requests for Comments},
	annote = {http://www.rfc-editor.org/rfc/rfc6750.txt},
}

@techreport{hardt_oauth_2012,
	type = {{RFC}},
	title = {The {OAuth} 2.0 {Authorization} {Framework}},
	url = {http://www.rfc-editor.org/rfc/rfc6749.txt},
	number = {6749},
	institution = {RFC Editor},
	author = {Hardt, D.},
	month = oct,
	year = {2012},
	note = {Backup Publisher: RFC Editor
ISSN: 2070-1721
Published: Internet Requests for Comments},
	annote = {http://www.rfc-editor.org/rfc/rfc6749.txt},
}

@techreport{fielding_hypertext_1999,
	type = {{RFC}},
	title = {Hypertext {Transfer} {Protocol} – {HTTP}/1.1},
	url = {http://www.rfc-editor.org/rfc/rfc2616.txt},
	number = {2616},
	institution = {RFC Editor},
	author = {Fielding, Roy T. and Gettys, James and Mogul, Jeffrey C. and Nielsen, Henrik Frystyk and Masinter, Larry and Leach, Paul J. and Berners-Lee, Tim},
	month = jun,
	year = {1999},
	note = {Backup Publisher: RFC Editor
ISSN: 2070-1721
Published: Internet Requests for Comments},
	annote = {http://www.rfc-editor.org/rfc/rfc2616.txt},
}

@techreport{crockford_applicationjson_2006,
	type = {{RFC}},
	title = {The application/json {Media} {Type} for {JavaScript} {Object} {Notation} ({JSON})},
	url = {http://www.rfc-editor.org/rfc/rfc4627.txt},
	number = {4627},
	institution = {RFC Editor},
	author = {Crockford, D.},
	month = jul,
	year = {2006},
	note = {Backup Publisher: RFC Editor
ISSN: 2070-1721
Published: Internet Requests for Comments},
	annote = {http://www.rfc-editor.org/rfc/rfc4627.txt},
}

@techreport{berners-lee_uniform_2005-1,
	type = {{STD}},
	title = {Uniform {Resource} {Identifier} ({URI}): {Generic} {Syntax}},
	url = {http://www.rfc-editor.org/rfc/rfc3986.txt},
	number = {66},
	institution = {RFC Editor},
	author = {Berners-Lee, Tim and Fielding, Roy T. and Masinter, Larry},
	month = jan,
	year = {2005},
	note = {Backup Publisher: RFC Editor
ISSN: 2070-1721
Published: Internet Requests for Comments},
	annote = {http://www.rfc-editor.org/rfc/rfc3986.txt},
}

@misc{pautasso_cesare_2021,
	title = {Cesare {Pautasso}},
	url = {https://scholar.google.com/citations?user=r7ISNNYAAAAJ&hl=en},
	abstract = {‪University of Lugano (USI), Switzerland‬ - ‪‪Cited by 6.836‬‬ - ‪Software Architecture‬ - ‪Web Engineering‬ - ‪Business Process Management‬},
	urldate = {2021-11-11},
	author = {Pautasso, Cesare},
	year = {2021},
	file = {Snapshot:/Users/tmst/Zotero/storage/DAB4S694/citations.html:text/html},
}

@misc{masse_mark_2021,
	title = {Mark {Masse}},
	url = {https://www.oreilly.com/pub/au/4998},
	abstract = {Mark Masse is a Software Architect at Disney, where he's built RESTful APIs and trained developers in their use.},
	language = {en},
	urldate = {2021-11-11},
	author = {Massé, Mark},
	year = {2021},
	file = {Snapshot:/Users/tmst/Zotero/storage/N9UAX2P2/4998.html:text/html},
}

@misc{tilkov_stefan_2021,
	title = {Stefan {Tilkov} – {O}’{Reilly} {Author}(s) – {O}’{Reilly}},
	url = {https://www.oreilly.com/people/stefan-tilkov/},
	abstract = {Stefan is a founder and principal consultant at INNOQ, where he spends his time alternating between advising customers on new technologies and taking the blame from his co-workers for doing so. He is a frequent speaker at international conferences and author of numerous articles.},
	urldate = {2021-11-11},
	author = {Tilkov, Stefan},
	year = {2021},
	file = {Stefan Tilkov – O’Reilly Author(s) – O’Reilly:/Users/tmst/Zotero/storage/N824NZTK/stefan-tilkov.html:text/html},
}

@misc{fielding_roy_2021,
	title = {Roy {T}. {Fielding}},
	url = {https://roy.gbiv.com/},
	urldate = {2021-11-11},
	author = {Fielding, Roy T.},
	year = {2021},
	file = {Snapshot:/Users/tmst/Zotero/storage/ZPQBKMBZ/roy.gbiv.com.html:text/html},
}
